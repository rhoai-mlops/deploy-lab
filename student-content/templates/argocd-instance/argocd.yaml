{{ $attendees := (add1 .Values.attendees | int) }}
{{- range $attendee := untilStep 1 $attendees 1 }}
---
apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: argocd
  labels:
    app: argocd
  namespace: user{{ $attendee}}-toolings
spec:
  # version: v2.10.5 # set this if you want the upstream containers instead
  applicationInstanceLabelKey: user{{ $attendee}}-toolings
  resourceTrackingMethod: label
  applicationSet: {}
  notifications:
    enabled: true
  rbac:
    defaultPolicy: 'role:admin'
    policy: |
      g, system:cluster-admins, role:admin
    scopes: '[groups]'
  resourceExclusions: |
    - apiGroups:
        - tekton.dev
      clusters:
        - '*'
      kinds:
        - TaskRun
        - PipelineRun
  server:
    ingress:
      enabled: false
    route:
      enabled: true
      tls:
        termination: reencrypt
  sso:
    dex:
      openShiftOAuth: true
    provider: dex
  resourceHealthChecks:
    - check: |
        local health_status = {}

        health_status.status = "Progressing"
        health_status.message = "Waiting for InferenceService to report status..."

        if obj.status ~= nil then

          local progressing = false
          local degraded = false
          local status_false = 0
          local status_unknown = 0
          local msg = ""

          if obj.status.modelStatus ~= nil then
            if obj.status.modelStatus.transitionStatus ~= "UpToDate" then
              if obj.status.modelStatus.transitionStatus == "InProgress" then
                progressing = true
              else
                degraded = true
              end
              msg = msg .. "0: transitionStatus | " .. obj.status.modelStatus.transitionStatus .. "\n"
            end
          end

          if obj.status.conditions ~= nil then
            for i, condition in pairs(obj.status.conditions) do

              if condition.status == "Unknown" then
                status_unknown = status_unknown + 1
              elseif condition.status == "False" then
                status_false = status_false + 1
              end

              if condition.status ~= "True" then
                msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status
                if condition.reason ~= nil and condition.reason ~= "" then
                  msg = msg .. " | " .. condition.reason
                end
                if condition.message ~= nil and condition.message ~= "" then
                  msg = msg .. " | " .. condition.message
                end
                msg = msg .. "\n"
              end

            end

            if progressing == false and degraded == false and status_unknown == 0 and status_false == 0 then
              health_status.status = "Healthy"
              msg = "InferenceService is healthy."
            elseif degraded == false and status_unknown > 0 then
              health_status.status = "Progressing"
            else
              health_status.status = "Degraded"
            end

            health_status.message = msg
          end
        end

        return health_status
      group: serving.kserve.io
      kind: InferenceService
{{- end }}